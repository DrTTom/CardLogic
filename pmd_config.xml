<?xml version="1.0"?>
<ruleset name="Some hopefully sensible rules" xmlns="http://pmd.sf.net/ruleset/2.0.0"
>
   <description>
      Some rule set I think might be sensible.
   </description>

   <rule ref="category/java/bestpractices.xml">
      <exclude name="JUnitTestsShouldIncludeAssert" /> <!-- contradicts usage of private check methods -->
      <exclude name="JUnitAssertionsShouldIncludeMessage" /> <!-- does not work with assert4j -->
      <exclude name="MethodReturnsInternalArray" /> <!-- we decide if we want that -->
      <exclude name="AccessorClassGeneration" /> <!-- singleton -->
      <exclude name="ArrayIsStoredDirectly" /> <!-- different opinion -->
   </rule>
   <rule
      ref="category/java/bestpractices.xml/JUnitTestContainsTooManyAsserts">
      <properties>
         <property name="maximumAsserts" value="10" />
      </properties>
   </rule>

   <rule ref="category/java/codestyle.xml">
      <exclude name="DefaultPackage" />
      <exclude name="CommentDefaultAccessModifier" />
      <exclude name="MethodArgumentCouldBeFinal" />
      <exclude name="LocalVariableCouldBeFinal" />
      <exclude name="OnlyOneReturn" />
      <exclude name="AtLeastOneConstructor" />
      <exclude name="CallSuperInConstructor" /> <!-- no information gained by it -->
      <exclude name="AbstractNaming" /> <!-- ugly to speak about this AbstractRule in this AbstractCategory -->
      <exclude name="ShortVariable" /> <!-- want those in lambdas -->
      <exclude name="AvoidFinalLocalVariable" /> <!-- contradicts "define everything in the minimal scope" -->
      <exclude name="GenericsNaming" /> <!-- understanding complex generics requires speaking names -->
      <exclude name="EmptyMethodInAbstractClassShouldBeAbstract" /> <!--optional callback methods -->
      <exclude name="ShortMethodName" /> <!-- fluent API might want methods like "of" -->
      <!-- exclude name="IdenticalCatchBranches" />  lots of false positives with PMD 6.4 -->
      <!-- exclude name="UnnecessaryFullyQualifiedName" /> false positives with inner classes / constants -->
   </rule>
   <rule ref="category/java/codestyle.xml/ClassNamingConventions">
      <properties>
         <property name="classPattern" value="[A-Z][a-zA-Z0-9]+" /> <!-- sometimes numbers are meant -->
         <property name="abstractClassPattern" value="[A-Z][a-zA-Z0-9]+" />
         <property name="interfacePattern" value="[A-Z][a-zA-Z0-9]+" />
         <property name="utilityClassPattern" value="[A-Z][a-zA-Z0-9]+" /> <!-- naming should follow purpose -->
      </properties>
   </rule>
   <rule ref="category/java/codestyle.xml/LongVariable">
      <properties>
         <property name="minimum" value="45" /> <!-- understandable names before shortness -->
      </properties>
   </rule>
   <rule ref="category/java/codestyle.xml/TooManyStaticImports">
      <properties>
         <property name="maximumStaticImports" value="6" /> <!-- allow some fluency -->
      </properties>
   </rule>
   <rule ref="category/java/codestyle.xml/ShortClassName">
      <properties>
         <property name="minimum" value="4" />
      </properties>
   </rule>

   <rule ref="category/java/design.xml">
      <exclude name="LawOfDemeter" /> <!-- fluent API -->
      <exclude name="LoosePackageCoupling" /> <!-- requires specific configuration -->
      <exclude name="SignatureDeclareThrowsException" /> <!-- TODO: specify different rules for test and exclude it only there -->
      <exclude name="AvoidCatchingGenericException" /> <!-- at system boundaries, we want to send a code to the client -->
      <exclude name="UseObjectForClearerAPI" /> <!-- too restrictive, not configurable -->
      <exclude name="DataClass" /> <!-- contradicts rule above -->
      <exclude name="GodClass" /> <!-- too restrictive, not configurable -->
      <exclude name="AvoidRethrowingException" /> <!-- not compatible with some lambdas -->
   </rule>
   <rule ref="category/java/design.xml/ExcessiveImports">
      <properties>
         <property name="minimum" value="50" /> <!-- server must import all the logic -->
      </properties>
   </rule>
   <rule ref="category/java/design.xml/TooManyMethods">
      <properties>
         <property name="maxmethods" value="20" />
      </properties>
   </rule>
   <rule ref="category/java/documentation.xml">
      <exclude name="CommentSize" />
   </rule>
   <rule ref="category/java/documentation.xml/CommentRequired">
      <properties>
         <property name="fieldCommentRequirement" value="Ignored" />
      </properties>
   </rule>

   <rule ref="category/java/errorprone.xml">
      <exclude name="BeanMembersShouldSerialize" /> <!-- false positives -->
      <exclude name="DataflowAnomalyAnalysis" /> <!-- false positives in each lambda -->
      <exclude name="AvoidLiteralsInIfCondition" /> <!-- magic number check done with other rules, false positives -->
      <exclude name="AvoidCatchingThrowable" /> <!-- at system boundaries, we want to send a code to the client or die trying -->
      <exclude name="UseProperClassLoader" /> <!-- developer decides which class loader to use -->
      <exclude name="NullAssignment" /> <!-- nulling object might be wanted -->
      <exclude name="ReturnEmptyArrayRatherThanNull" /> <!-- that's a semantic question -->
      <exclude name="MissingBreakInSwitch" /> <!-- false positives (last case) -->
      <exclude name="CloneThrowsCloneNotSupportedException" /> <!-- declare only exceptions which are really thrown -->
      <exclude name="ProperCloneImplementation" /> <!-- too many false positives -->
   </rule>
   <rule ref="category/java/errorprone.xml/AvoidDuplicateLiterals">
      <properties>
         <property name="maxDuplicateLiterals" value="6" />
         <property name="minimumLength" value="5" />
         <property name="skipAnnotations" value="true" />
      </properties>
   </rule>

   <rule ref="category/java/multithreading.xml">
      <exclude name="UseConcurrentHashMap"></exclude> <!-- false positives -->
      <exclude name="AvoidSynchronizedAtMethodLevel" /> <!-- developer decides which block to synchronize -->
      <exclude name="AvoidUsingVolatile" /> <!-- developer decides about the need -->
   </rule>

   <rule ref="category/java/performance.xml">
      <exclude name="AvoidFileStream" /> <!-- addresses an OpenJDK bug which is already fixed -->
      <exclude name="AvoidInstantiatingObjectsInLoops" /> <!-- too many false positives, sometimes we need n objects -->
   </rule>

   <rule ref="category/java/security.xml" />

</ruleset>
